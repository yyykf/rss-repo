<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yyykf.github.io/rss-repo/index.html</id>
    <title>osmos::feed</title>
    <updated>2021-06-01T01:57:12.926Z</updated>
    <generator>osmosfeed 1.9.0</generator>
    <link rel="alternate" href="https://yyykf.github.io/rss-repo/index.html"/>
    <link rel="self" href="https://yyykf.github.io/rss-repo/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[2021全国科技工作者日：致敬科技工作者]]></title>
        <id>https://tech.meituan.com/2021/05/30/2021-5-30.html</id>
        <link href="https://tech.meituan.com/2021/05/30/2021-5-30.html"/>
        <updated>2021-05-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[你因科技而精彩，科技因你而腾飞。]]></summary>
        <author>
            <name>美团技术团队</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux Bcc Ext4 Latency Tracing]]></title>
        <id>https://kernel.taobao.org//2017/10/Linux-bcc-ext4-Latency-Tracing/</id>
        <link href="https://kernel.taobao.org//2017/10/Linux-bcc-ext4-Latency-Tracing/"/>
        <updated>2021-05-29T01:17:29.809Z</updated>
        <summary type="html"><![CDATA[Linux Bcc Ext4 Latency Tracing]]></summary>
        <author>
            <name>Kernel Aliyun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[科技爱好者周刊（第 160 期）：中年码农的困境]]></title>
        <id>http://www.ruanyifeng.com/blog/2021/05/weekly-issue-160.html</id>
        <link href="http://www.ruanyifeng.com/blog/2021/05/weekly-issue-160.html"/>
        <updated>2021-05-28T00:20:22.000Z</updated>
        <summary type="html"><![CDATA[这里记录每周值得分享的科技内容，周五发布。...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[外卖商品的标准化建设与应用]]></title>
        <id>https://tech.meituan.com/2021/05/27/food-name-standardization.html</id>
        <link href="https://tech.meituan.com/2021/05/27/food-name-standardization.html"/>
        <updated>2021-05-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[1. 背景及目标
商品作为外卖交易过程中的核心要素，决定了供需匹配的精准度，直接影响交易行为是否可以达成。外卖平台美食、甜点、饮品类在线商品有亿级之多，其中很多是属性信息一致的相同商品。建立对商品的标准化描述、聚合相同商品，是很多业务场景的诉求。
供销分析场景：想分析一下望京的商家都售卖哪些菜品，有多少商家卖“西红柿炒鸡蛋”？
遇到的问题：由于菜品是非标品，并且商家对菜品命名的个性化程度也较高，因此在外卖平台，同一个菜品名出现不同的命名方式；例如“西红柿炒鸡蛋”有西红柿炒蛋、小番茄炒蛋、西红柿鸡蛋、京城三绝~番茄炒蛋【正价小份菜】等，没有办法简单通过关键字进行聚合。
主题推荐场景：想出一个菜品粒度的主题，快速筛选“小龙虾”、“烤鱼”、“鸡公煲”、“黄焖鸡”等热门菜品？
遇到的问题：商品分类的颗粒度不够精细，无法快速找到适合颗粒度的菜品。
商家上单场景：像“鱼香肉丝”这样普遍的菜品，每个商家上单都需要录入食材、口味、做法、菜系、荤素等标签，录入成本较高，能不能像淘宝一样，选择“iPhone 12”，它的属性就能够自动关联。
遇到的问题：没有将菜品的属性标准化，菜品和属性之间没有关联关系。
基于上述业务应用的痛点，启动外卖商品的标准化建设。目标是建立商品的标准化名称，实现对相同商品的聚合，从而为业务提供合理粒度的概念划分，赋能运营端供销分析、用户端个性化召回排序、商家端标签生产。
2. 业界调研
对于业界的参考，主要参考淘宝标准化SPU建设。SPU在淘宝体系中决定了商品是什么，是商品信息聚合的最小单位，由关键属性+绑定属性来构成。

关键属性：用来约束和定义一个商品的，比如iPhone X，决定他的就是“苹果”这个品牌和“X”这个系列。
绑定属性：是关键属性的补充和细化，比如当iPhone X已经明确了这个产品后，其他的属性也确定，比如网络模型，屏幕尺寸等，进一步补充这些属性内…]]></summary>
        <author>
            <name>美团技术团队</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[外卖套餐搭配的探索和应用]]></title>
        <id>https://tech.meituan.com/2021/05/27/set-meal-recommendation.html</id>
        <link href="https://tech.meituan.com/2021/05/27/set-meal-recommendation.html"/>
        <updated>2021-05-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[1. 背景
让用户更方便快捷地选购到满意的外卖商品，是美团外卖一直在努力的方向。本文主要介绍了针对美食类商家的套餐搭配技术以及应用实践。在外卖点餐的选择过程中，用户一般会考虑单品偏好、组合搭配等因素，挑选商家和商品的过程耗时较长。我们通过套餐搭配技术，基于商家的候选商品，自动搭配优质套餐，轻松解决用户“选择困难症”，能够提升用户的决策效率。
2. 业务目标和挑战
2.1 业务目标
目前，美团外卖App的套餐搭配应用有很多，有“今日套餐推荐”、“满减神器”、“套餐搭配推荐”等。由于目前外卖商家自行搭配套餐的能力较弱而且意愿不强，导致外卖套餐底层供给对业务场景和商家的覆盖率偏低，不能满足套餐相关推荐排序应用的需求。因此，外卖套餐搭配的业务目标是对于美食类商家搭配出候选的套餐组合，给套餐相关应用方提供更丰富的套餐供给。

对于套餐相关应用方，我们进行了业务分析：“今日推荐”、“满减神器”等业务的搭配条件相对较弱且可以离线获取搭配条件，归类为推荐型相关业务，此类业务需要保证商家的套餐覆盖率提升，从而保证商家的推荐露出。详情页、满减加购等业务的搭配条件较强，而且偏实时。例如，详情页是用户指定一个菜品后进行搭配，满减加购场景是用户选择一个菜品和特定的价格区间作为条件。这些属于搭配型业务，此类业务需要保证套餐对实时场景的覆盖，从而保证套餐搭配Tab的露出。套餐搭配算法的目标有：①提升套餐组合的覆盖度，从而给下游的套餐相关应用提供场景覆盖率高、多样性充足的套餐组合。②保证搭配套餐的质量。
2.2 业务挑战
商品搭配在电商场景下也存在较多的应用，例如淘宝的购物车搭配、服装搭配，化妆品搭配。购物车搭配是基于用户购物车、已购买商品的打包推荐，例如，用户在加购牙刷后，可以给出牙膏的推荐。这类方法主要基于商品的购买行为进行相关性的推荐，目标不是形成一个完成的搭配组合。但是，外卖美食商品搭配则需要考虑…]]></summary>
        <author>
            <name>美团技术团队</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[美团外卖美食知识图谱的迭代及应用]]></title>
        <id>https://tech.meituan.com/2021/05/27/food-knowledge-graph.html</id>
        <link href="https://tech.meituan.com/2021/05/27/food-knowledge-graph.html"/>
        <updated>2021-05-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[0. 写在前面
菜品是外卖交易过程的核心要素，对菜品的理解也是实现外卖供需匹配的重点。本期推送，我们将通过三篇文章系统地介绍了美团外卖美食知识图谱的构建和应用。第一篇文章会介绍外卖知识图谱的体系全貌，包括菜品类目、标准菜品、美食基础属性(食材、口味等)和美食业务主题属性。同时外卖的菜品属于非标品。第二篇，我们将重点介绍外卖菜品标准化建设思路、技术方案和业务应用。由于外卖的业务特点是搭配成单，所以在第三篇我们会针对性地介绍外卖套餐搭配技术的迭代以及应用实践。希望对从事相关工作的同学能够带来一些启发或者帮助。
本文系外卖美食知识图谱系列的第一篇文章，这篇文章系统地介绍了美团外卖美食知识图谱的标签体系结构，包括菜品类目标签、标准菜品名、美食基础属性（食材、口味、菜系等）和美食业务主题属性（商家招牌、类目经典等）。在技术层面，举例对标签体系的具体构建方法进行介绍，例如基于BERT预训练的分类模型。在应用方面，介绍了美食知识图谱在美团外卖业务的具体应用，包括支撑套餐搭配的菜品表征、提升搜索和商家推荐等业务的用户体验。
1. 背景
知识图谱，旨在描述真实世界中存在的各种实体和实体之间的关系。在美团外卖业务中，美食商品是美团向用户提供服务的基础，美食知识图谱的建设，可以帮助我们向用户提供更加准确、更加丰富、更加个性化的美食服务。另外，美团外卖业务向用户提供“到家”吃饭的服务，到店餐饮业务则向用户提供“到店”吃饭的服务，而外卖和到店的商家和菜品有相当程度的重合，菜品数据的对齐，为我们进行线上（外卖场景）线下（到店场景）数据的对比分析也提供了一个很好的“抓手”。
本文介绍了外卖美食知识图谱的建设，基于对外卖业务数据（外卖交易数据、商家录入的商品标签信息、专业描述PGC、用户评论UGC、商品图片等）和站外数据（百科、菜谱等）的挖掘和分析，形成了针对外卖美食的分类体系（美食类目标签）和标准化体系…]]></summary>
        <author>
            <name>美团技术团队</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.9.0]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.9.0</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.9.0"/>
        <updated>2021-05-26T06:02:55.000Z</updated>
        <summary type="html"><![CDATA[Added: experimental support for iTunes podcast feed: Demo | Source. With this new release, you can render an audio control to play the mp3 file and display iTunes episode duration. It is "experimental" due to these caveats:

This feature is currently only available through custom template.
iTunes has no strict format requirement for duration. The unit is most likely seconds but can be "hh:mm:ss" or "mm:ss" for some sources. A future version may expose a human readable string to the template.
No image support yet. Some shows might have disabled CORS or use a relative URL for image, which forces osmosfeed to download the image during build. A future version may support it.
You can't republish the podcast in the feed output. Supporting this goes beyond the scope of the project at the moment.
Fixed: the articles in template data were not sorted.
Thank you @Zenigata]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.8.1]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.8.1</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.8.1"/>
        <updated>2021-05-23T05:40:12.000Z</updated>
        <summary type="html"><![CDATA[Fixed: UnhandledPromiseRejectionWarning: Error: At least one option must be a string]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.8.0]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.8.0</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.8.0"/>
        <updated>2021-05-23T05:12:08.000Z</updated>
        <summary type="html"><![CDATA[Changed: Smart summary truncation. When there is no dedicated summary (only Atom feed has it, and many sites don't use it) from the source, we check if the content/description (Both Atom and RSS) field is long enough to be full text. If so, it will be truncated into a "pseudo" summary. If not, we assume the source used the content field as summary, and it will be displayed in full length.
Thank you: @LooperXX.]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[科技爱好者周刊（第 159 期）：游戏开发者的年薪]]></title>
        <id>http://www.ruanyifeng.com/blog/2021/05/weekly-issue-159.html</id>
        <link href="http://www.ruanyifeng.com/blog/2021/05/weekly-issue-159.html"/>
        <updated>2021-05-21T00:17:00.000Z</updated>
        <summary type="html"><![CDATA[这里记录每周值得分享的科技内容，周五发布。...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[百亿规模API网关服务Shepherd的设计与实现]]></title>
        <id>https://tech.meituan.com/2021/05/20/shepherd-api-gateway.html</id>
        <link href="https://tech.meituan.com/2021/05/20/shepherd-api-gateway.html"/>
        <updated>2021-05-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[一、背景介绍
1.1 API网关是什么？
API网关是随着微服务（Microservice）概念兴起的一种架构模式。原本一个庞大的单体应用（All in one）业务系统被拆分成许多微服务（Microservice）系统进行独立的维护和部署，服务拆分带来的变化是API的规模成倍增长，API的管理难度也在日益增加，使用API网关发布和管理API逐渐成为一种趋势。一般来说，API网关是运行于外部请求与内部服务之间的一个流量入口，实现对外部请求的协议转换、鉴权、流控、参数校验、监控等通用功能。
1.2 为什么要做Shepherd API网关？
在没有Shepherd API网关之前，美团业务研发人员如果要将内部服务输出为对外的HTTP API接口。通常要搭建一个Web应用，用于完成基础的鉴权、限流、监控日志、参数校验、协议转换等工作，同时需要维护代码逻辑、基础组件的升级，研发效率相对比较低。此外，每个Web应用都需要维护机器、配置、数据库等，资源利用率也非常差。
美团内部一些业务线苦于没有现成的解决方案，根据自身业务特点，研发了业务相关的API网关。放眼业界，亚马逊、阿里巴巴、腾讯等公司也都有成熟的API网关解决方案。
因此，Shepherd API网关项目正式立项，我们的目标是为美团提供高性能、高可用、可扩展的统一API网关解决方案，让业务研发人员通过配置的方式即可对外开放功能和数据。

1.3 使用Shepherd带来的收益是什么？
从业务研发人员的角度来看，接入Shepherd API网关，能带来哪些收益呢？简而言之包括三个方面。

提升研发效率
业务研发人员只需要通过配置的方式即可快速开放服务接口。
Shepherd统一提供鉴权、限流、熔断等非业务基础能力。
Shepherd支持业务研发人员通过开发自定义组件的方式扩展API网关能力。

降低沟通成本
业务研发人员配置好A…]]></summary>
        <author>
            <name>美团技术团队</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[中国经济的数字逻辑]]></title>
        <id>http://www.ruanyifeng.com/blog/2021/05/china-economy-explanation.html</id>
        <link href="http://www.ruanyifeng.com/blog/2021/05/china-economy-explanation.html"/>
        <updated>2021-05-19T12:54:48.000Z</updated>
        <summary type="html"><![CDATA[重庆市前市长黄奇帆退休以后，受聘担任复旦大学特聘教授，定期给师生做讲座，介绍他对中国经济的看法。...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.7.2]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.7.2</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.7.2"/>
        <updated>2021-05-17T05:32:19.000Z</updated>
        <summary type="html"><![CDATA[⚠ Deprecated: To accommodate the monorepo setup, the node version in all templates/demos/examples has changed from 14 to 16. This is not a breaking change as our compile target is still node 14, and node 16 is backward compatible. We still recommend you start using node-version: "16" in your .github/workflows/update-feed.yaml today to get the performance/security improvements from the newer node. See example
Chore: Reorganize to monorepo with npm workspace.]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.7.1]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.7.1</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.7.1"/>
        <updated>2021-05-16T02:33:58.000Z</updated>
        <summary type="html"><![CDATA[Fixed: static files were unnecessarily copied for custom templates.]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.7.0]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.7.0</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.7.0"/>
        <updated>2021-05-16T01:42:24.000Z</updated>
        <summary type="html"><![CDATA[Added: templating system. Demo | Source | Docs
Chore: rendering logic refactoring. Adopting functional paradigm.
Thank you @tianheg, @onnyyonn]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[科技爱好者周刊（第 158 期）：内容渠道的贬值]]></title>
        <id>http://www.ruanyifeng.com/blog/2021/05/weekly-issue-158.html</id>
        <link href="http://www.ruanyifeng.com/blog/2021/05/weekly-issue-158.html"/>
        <updated>2021-05-14T00:17:14.000Z</updated>
        <summary type="html"><![CDATA[这里记录每周值得分享的科技内容，周五发布。...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[算法平台在线服务体系的演进与实践]]></title>
        <id>https://tech.meituan.com/2021/05/13/turing-os-online-serving.html</id>
        <link href="https://tech.meituan.com/2021/05/13/turing-os-online-serving.html"/>
        <updated>2021-05-13T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[0. 写在前面
AI可以说是目前互联网行业炙手可热的“明星”。无论是老牌巨头，还是流量新贵，都在大力研发AI技术，为自家的业务赋能。美团很早就开始探索不同的机器学习模型在各种业务场景的应用，从最开始的线性模型、树模型，再到近几年的深度神经网络、BERT、DQN等，并成功应用于搜索、推荐、广告、配送等业务，也取得了较好的效果与产出。
美团配送技术部建设的算法平台——Turing（下称图灵平台），旨在提供一站式的服务，覆盖数据预处理、特征生成、模型训练、模型评估、模型部署、在线预测、AB实验、算法效果评估的全流程，降低了算法工程师的使用门槛，帮助他们脱离繁琐的工程化开发，把有限的精力聚焦于业务和算法逻辑的迭代优化。具体的实践，大家可参考美团技术团队此前推送的一篇技术博客《一站式机器学习平台建设实践》。
随着机器学习平台、特征平台、AB平台等陆续完成，配送技术团队发现在线预测部分逐渐成为算法开发和迭代的瓶颈，为此，我们开始启动图灵在线服务框架的整体研发。本文将与大家详细探讨图灵平台中的在线服务框架——图灵OS（Online Serving）的设计和实践，希望对大家能够有所帮助或者启发。
随着图灵平台逐渐成熟，包括美团配送在内，已经有超过18个业务方接入了图灵平台，整体概况大致如下：共接入10+个BU（业务单元），100%覆盖美团配送核心业务场景，支持500+个在线模型、2500+个特征、180+个算法策略，每天支持百亿次的在线预测。通过图灵平台赋能，算法迭代周期由天级别降至小时级别，大幅提升了配送算法的迭代效率。
1. 图灵平台介绍
图灵平台是一站式算法平台，总体架构如下图1所示，底层依托于Kubernetes和Docker，实现了对CPU/GPU等资源的统一调度和管理，集成了Spark ML、XGBoost、TensorFlow等机器学习/深度学习框架，包含特征生产、模型训练、…]]></summary>
        <author>
            <name>美团技术团队</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.4.0]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.4.0</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.4.0"/>
        <updated>2021-05-10T08:55:42.000Z</updated>
        <summary type="html"><![CDATA[Added: Basic theme customization: Demo | Source | Docs.]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.6.0]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.6.0</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.6.0"/>
        <updated>2021-05-10T08:15:20.000Z</updated>
        <summary type="html"><![CDATA[Added: Link from the title of a subscription to its website.
Added: Store feedUrl and siteUrl for each source in cache.
Added: Semantic element (<time>) for timestamp on the UI.
Added: Semantic API for theming the default template. Demo | Source | Docs
Changed: Moved feed metadata from article level to feed level in cache.
Fixed: Any html-like text was stripped from title. Fixed with encoded text.
Removed: href for each source in cache. The value was never used so it's not a breaking change.]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.5.0]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.5.0</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.5.0"/>
        <updated>2021-05-08T05:16:47.000Z</updated>
        <summary type="html"><![CDATA[Added: Atom feed generator
Added: Customizable site title
Added: Copy all files from static directory to the root of the site.
Changed: Favicon, css, and js assets now existing at site root level.
Chore: Excluded testing files from repo.]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GraphQL及元数据驱动架构在后端BFF中的实践]]></title>
        <id>https://tech.meituan.com/2021/05/06/bff-graphql.html</id>
        <link href="https://tech.meituan.com/2021/05/06/bff-graphql.html"/>
        <updated>2021-05-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[1 BFF的由来
BFF一词来自Sam Newman的一篇博文《Pattern:Backends For Frontends》，指的是服务于前端的后端。BFF是解决什么问题的呢？据原文描述，随着移动互联网的兴起，原适应于桌面Web的服务端功能希望同时提供给移动App使用，而在这个过程中存在这样的问题：

移动App和桌面Web在UI部分存在差异。
移动App涉及不同的端，不仅有iOS、还有Android，这些不同端的UI之间存在差异。
原有后端功能和桌面Web UI之间已经存在了较大的耦合。

因为端的差异性存在，服务端的功能要针对端的差异进行适配和裁剪，而服务端的业务功能本身是相对单一的，这就产生了一个矛盾——服务端的单一业务功能和端的差异性诉求之间的矛盾。那么这个问题怎么解决呢？这也是文章的副标题所描述的”Single-purpose Edge Services for UIs and external parties”，引入BFF，由BFF来针对多端差异做适配，这也是目前业界广泛使用的一种模式。

在实际业务的实践中，导致这种端差异性的原因有很多，有技术的原因，也有业务的原因。比如，用户的客户端是Android还是iOS，是大屏还是小屏，是什么版本。再比如，业务属于哪个行业，产品形态是什么，功能投放在什么场景，面向的用户群体是谁等等。这些因素都会带来面向端的功能逻辑的差异性。
在这个问题上，笔者所在团队负责的商品展示业务有一定的发言权，同样的商品业务，在C端的展示功能逻辑，深刻受到商品类型、所在行业、交易形态、投放场所、面向群体等因素的影响。同时，面向消费者端的功能频繁迭代的属性，更是加剧并深化了这种矛盾，使其演化成了一种服务端单一稳定与端的差异灵活之间的矛盾，这也是商品展示（商品展示BFF）业务系统存在的必然性原因。本文主要在美团到店商品展示场景的背景下，介绍面临的…]]></summary>
        <author>
            <name>美团技术团队</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.3.1]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.3.1</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.3.1"/>
        <updated>2021-05-05T05:19:57.000Z</updated>
        <summary type="html"><![CDATA[Fixed: Avoid crwalers.
Fixed: Error logging from XML parser.
Fixed: Typo in docs.
Thank you: @dym-sh, @tabokie, @cheese1]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.3.0]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.3.0</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.3.0"/>
        <updated>2021-05-05T05:19:26.000Z</updated>
        <summary type="html"><![CDATA[Added: Customize cache lifespan with cacheMaxDays property in osmosfeed.yaml.
Added: Documentation for osmosfeed.yaml.
Fixed: More intuitive logging during build.
Chore: Refactored parameter passing for enrich step.]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
</feed>