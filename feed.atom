<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yyykf.github.io/rss-repo/index.html</id>
    <title>osmos::feed</title>
    <updated>2021-07-25T00:38:38.111Z</updated>
    <generator>osmosfeed 1.11.0</generator>
    <link rel="alternate" href="https://yyykf.github.io/rss-repo/index.html"/>
    <link rel="self" href="https://yyykf.github.io/rss-repo/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[科技爱好者周刊（第 168 期）：游戏《底特律：变人》]]></title>
        <id>http://www.ruanyifeng.com/blog/2021/07/weekly-issue-168.html</id>
        <link href="http://www.ruanyifeng.com/blog/2021/07/weekly-issue-168.html"/>
        <updated>2021-07-23T00:34:09.000Z</updated>
        <summary type="html"><![CDATA[这里记录每周值得分享的科技内容，周五发布。...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[美团终端消息投递服务Pike的演进之路]]></title>
        <id>https://tech.meituan.com/2021/07/22/pike-2.0.html</id>
        <link href="https://tech.meituan.com/2021/07/22/pike-2.0.html"/>
        <updated>2021-07-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[1 Pike的前世今生
1.1 Pike 1.0的诞生背景
2015年，美团诞生了Shark终端网络通道，为公司移动端提供长连代理加速服务。Shark通过网络接入点的全球多地部署和保持长连来提升网络请求的端到端成功率，降低端到端延时，从而提升用户体验。
Pike 1.0是基于Shark长连通道实现的应用内推送服务。由于底层传输基于Shark长连通道，使得Pike 1.0天生便具有了低延时、高可靠、防DNS劫持等优秀基因。目前Pike 1.0在美团内部的实时互动、营销推送、状态下发、配置同步等业务场景都有广泛使用。
1.2 Pike 1.0的工作流程
移动端SDK会在每次长连接创建成功后，使用APPID、设备唯一标识UnionID（美团唯一标识、点评唯一标识等）向服务器发起注册，在注册成功之后业务服务端就可以通过Pike 1.0服务端SDK提供的接口，主动向设备的App推送消息。服务端推送的消息通过长连接通道抵达客户端，最后通过注册的回调接口投递给业务方。整体工作流程参见下图：

1.3 Pike 1.0的优势
Pike 1.0底层传输基于Shark长连通道，所以Pike 1.0在以下几个方面有不错的表现：

防DNS劫持：底层通道直接使用IP直连，省去DNS解析耗时的同时也避免了被DNS劫持的风险。
低延时：Shark长连接采用就近接入点长连接的方式，省去了传统HTTP传输需要多次建连、握手的消耗，端到端数据传输延时相比HTTP大幅缩短。
安全性好：Shark采用自定义二进制协议进行数据传输，进行了通道级别的TLS加密，防篡改，更安全。
更好的境外体验：Pike 1.0与Shark共享服务集群，Shark长连通道在海外多地都部署了接入点，代理加速接入，网络延时及成功率表现要优于常规请求。

1.4 Pike 1.0的痛点
Pike 1.0作为Shark的衍生产品固然有其闪光…]]></summary>
        <author>
            <name>美团技术团队</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[科技爱好者周刊（第 167 期）：广告拦截器太过分了]]></title>
        <id>http://www.ruanyifeng.com/blog/2021/07/weekly-issue-167.html</id>
        <link href="http://www.ruanyifeng.com/blog/2021/07/weekly-issue-167.html"/>
        <updated>2021-07-16T00:45:10.000Z</updated>
        <summary type="html"><![CDATA[这里记录每周值得分享的科技内容，周五发布。...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[本地生活综合性需求图谱的构建及应用]]></title>
        <id>https://tech.meituan.com/2021/07/15/construction-and-application-of-lifestyle-general-needs-net.html</id>
        <link href="https://tech.meituan.com/2021/07/15/construction-and-application-of-lifestyle-general-needs-net.html"/>
        <updated>2021-07-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[一、背景
1.1 业务现状
以“帮大家吃得更好，生活更好”为使命，美团覆盖了外卖、餐饮、酒店、民宿、旅游、门票、电影/演出、休闲/玩乐、丽人、医疗、亲子、教育、结婚、生活服务等数百个行业，满足数以亿计用户的多样化生活服务需求。为了持续增加平台价值，除了推动用户和商户在数量和质量上的不断提升之外，更高效地匹配用户需求和商户供给也是重要抓手之一。
为了提升匹配的效率，我们需要更充分、深入地理解用户需求和商户供给，并且尝试从用户视角出发来组织和管理供给。当前，“行业-类目-商户-商品”是一种较为常见的供给组织和管理方式，然而随着业务和行业的快速发展，这种组织方式带来的痛点日渐突显，举例来说：

部分指向性不明确的用户需求，较难得到适合的匹配结果。例如“周末陪宝宝去哪儿玩？”由于平台的匹配结果不理想，用户往往只能在线下完成类目决策，决定带宝宝去农家乐烧烤，再到平台上搜索相应的农家乐团购。
部分需求跨多个类目，匹配过程不够流畅。例如“周末和朋友去哪里放松一下？”用户在线下完成类目决策后，可选类目包括KTV、酒吧、密室、桌游等，但各类目的承载页面相互独立，用户需要在承载页面间来回切换。
在部分指向明确的类目中，用户仍然难以找到满足自己需求的供给。例如在医美类目下，因为缺乏相关知识，用户往往并不了解商户提供的形形色色的服务项目分别具有什么功效，适合什么部位，应该使用什么材料，无法高效地找到适合自己的服务供给。

上述问题的本质原因在于供给的组织方式主要是从行业视角出发，没有充分考虑到用户视角。在当前以满足用户需求为首要目标的市场环境下，我们需要迭代完善现有的供给组织方式。
1.2 问题解析
为了解决上述问题，我们尝试从一个外部视角，结合第一性原理去进行剖析。在整个人类社会中，按照马斯洛需求层次[1]的理论，人的需求是可以被归纳及分层的。如果将人类社会看作一个系统，人类在其中一个称为“市场…]]></summary>
        <author>
            <name>美团技术团队</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[科技爱好者周刊（第 166 期）：视频学习胜过读书吗？]]></title>
        <id>http://www.ruanyifeng.com/blog/2021/07/weekly-issue-166.html</id>
        <link href="http://www.ruanyifeng.com/blog/2021/07/weekly-issue-166.html"/>
        <updated>2021-07-09T00:45:10.000Z</updated>
        <summary type="html"><![CDATA[这里记录每周值得分享的科技内容，周五发布。...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[多业务建模在美团搜索排序中的实践]]></title>
        <id>https://tech.meituan.com/2021/07/08/multi-business-modeling.html</id>
        <link href="https://tech.meituan.com/2021/07/08/multi-business-modeling.html"/>
        <updated>2021-07-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[引言
美团的使命是“帮大家吃得更好，生活更好”，美团 App 承载的业务包括外卖、到店餐饮、买菜、优选、酒店、旅游、休闲娱乐等各类生活服务。美团首页的搜索是美团 App 上各类生活服务最大的流量分发入口，每天为数千万的用户提供各种服务。美团搜索排序是一个典型的多业务混合排序建模问题，一个典型的多业务搜索场景是当用户搜索地点，如 “望京” 的时候，用户的需求不是很明确，此时搜索的结果页如下图 1 所示，下方的商家列表中会包含望京附近餐饮、电影、休闲娱乐、酒店等多种业务的结果，这就是一个多业务混合排序场景。

而多业务场景存在如下几点挑战：

因业务之间存在共性和特性，如何让模型兼顾这两种特性，实现更好的数据学习。比如到店餐饮对距离特征非常敏感，而旅游景点业务对距离特征相对不敏感。
业务天然存在高频和低频特性（比如外卖和旅游），导致模型的训练数据中多业务样本数量不平衡。
各个业务往往有自己不同的主目标，如何满足不同业务的目标，最终能够提升搜索的用户体验。

本文分享了美团搜索中的多业务排序建模优化工作，我们主要聚焦在到店商家多业务场景，后续的内容会分为以下四个部分：第一部分是对美团搜索排序分层架构进行简单介绍；第二部分会介绍多路融合层上的多业务融合建模；第三部分会介绍精排模型的多业务排序建模；最后一部分是总结和展望。希望能对从事相关工作的同学有所启发或者帮助。
排序流程简介
美团搜索系统流程如下图 2 所示，整体流程分为数据层、召回层、排序层和展示层。其中排序层分为以下几个子部分：

粗排层：使用相对简单的模型对召回候选集进行初步过滤，实现排序效果和性能的 Trade-off。
多路融合层：使用查询词特征、上下文场景特征构建配额模型，进行不同业务候选集的数量控制，实现用户需求的精确理解。
精排层：使用亿级别特征的深度学习模型，捕捉各种显式和隐式信号，实现 Item 排序分数的精…]]></summary>
        <author>
            <name>美团技术团队</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[科技爱好者周刊（第 165 期）：全端 App 的时代]]></title>
        <id>http://www.ruanyifeng.com/blog/2021/07/weekly-issue-165.html</id>
        <link href="http://www.ruanyifeng.com/blog/2021/07/weekly-issue-165.html"/>
        <updated>2021-07-02T00:19:51.000Z</updated>
        <summary type="html"><![CDATA[这里记录每周值得分享的科技内容，周五发布。...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[程序员的酒后真言]]></title>
        <id>http://www.ruanyifeng.com/blog/2021/06/drunk-post-of-a-programmer.html</id>
        <link href="http://www.ruanyifeng.com/blog/2021/06/drunk-post-of-a-programmer.html"/>
        <updated>2021-06-28T01:10:50.000Z</updated>
        <summary type="html"><![CDATA[美国最大的论坛 Reddit，最近有一个热帖。...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
</feed>