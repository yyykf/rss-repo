<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yyykf.github.io/rss-repo/index.html</id>
    <title>osmos::feed</title>
    <updated>2021-06-15T00:36:29.895Z</updated>
    <generator>osmosfeed 1.10.2</generator>
    <link rel="alternate" href="https://yyykf.github.io/rss-repo/index.html"/>
    <link rel="self" href="https://yyykf.github.io/rss-repo/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[科技爱好者周刊（第 162 期）：生活就像《吃豆人》游戏]]></title>
        <id>http://www.ruanyifeng.com/blog/2021/06/weekly-issue-162.html</id>
        <link href="http://www.ruanyifeng.com/blog/2021/06/weekly-issue-162.html"/>
        <updated>2021-06-11T00:15:31.000Z</updated>
        <summary type="html"><![CDATA[这里记录每周值得分享的科技内容，周五发布。...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SIGIR 2021 | 广告系统位置偏差的CTR模型优化方案]]></title>
        <id>https://tech.meituan.com/2021/06/10/deep-position-wise-interaction-network-for-ctr-prediction.html</id>
        <link href="https://tech.meituan.com/2021/06/10/deep-position-wise-interaction-network-for-ctr-prediction.html"/>
        <updated>2021-06-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[近些年来，由于人工智能技术的高速发展，所带来的公平性问题也愈发受到关注。同样的，广告技术也存在着许多公平性问题，由于公平性问题造成的偏差对广告系统的生态会产生较大的负面影响。图1所示的是广告系统中的反馈环路[1]，广告系统通过累积的用户交互反馈数据基于一定的假设去训练模型，模型对广告进行预估排序展示给用户，用户基于可看到的广告进行交互进而累积到数据中。在该环路中，位置偏差、流行度偏差等各种不同类型的偏差会在各环节中不断累积，最终导致广告系统的生态不断恶化，形成“强者愈强、弱者愈弱”的马太效应。
由于偏差对广告系统和推荐系统的生态有着极大的影响，针对消除偏差的研究工作也在不断增加。比如国际信息检索会议SIGIR在2018年和2020年组织了一些关注于消除偏差主题的专门会议，同时也给一些基于偏差和公平性的论文颁发了最佳论文奖（Best Paper）[2,3]。KDD Cup 2020的其中一个赛道也基于电子商务推荐中的流行度偏差进行开展[1]。

美团到店广告平台算法团队基于多年来在广告领域上积累的经验，一直在数据偏差等业界挑战性问题不断进行深入优化与算法创新。在之前分享的《KDD Cup 2020 Debiasing比赛冠军技术方案与广告业务应用》一文[4]中，团队分享了在KDD Cup比赛中取得冠军的选择性偏差以及流行度偏差的解决方案，同时也分享了在广告业务上偏差优化的技术框架。
本文基于这一技术框架进行继续介绍，聚焦于位置偏差问题的最新进展，并详细地介绍团队在美团广告取得显著业务效果的位置偏差CTR模型优化方案，以该方案为基础形成的论文《Deep Position-wise Interaction Network for CTR Prediction》也被国际顶级会议SIGIR 2021录用。
1. 背景
美团到店广告平台算法团队基于美团和点评双侧的广告业务场景，不断进行…]]></summary>
        <author>
            <name>美团技术团队</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[美团民宿跨端复用框架设计与实践]]></title>
        <id>https://tech.meituan.com/2021/06/10/react-native-hybrid-practice-dsl-in-meituan.html</id>
        <link href="https://tech.meituan.com/2021/06/10/react-native-hybrid-practice-dsl-in-meituan.html"/>
        <updated>2021-06-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[从 PC 时代、移动时代到万物互联的 IoT 时代，伴随终端设备的日趋多样化，跨端复用的种子自此落地，开始生根发芽。从依靠容器能力、各类离线化预装包的 Hybrid 方案，到通过 JSC 连接 JavaScript 生态与原生控件，结合视图框架（React、Vue等）寻找效率、动态性和性能更均衡的 Native 容器方案（React Native、Weex 等），接着由微信牵头的以多进程 WebView、容器标准化的小程序方案出世，各平台小程序随之春笋萌发，随后带来了国内Taro、uni-app、Rax、Remax等多端框架的百家争鸣。
从业务角度出发，跨端技术演进更多是在不同阶段、不同时间段内业务效率上的选择，美团民宿业务就是在大前端融合的浪潮中逐浪前行，不断探索和迭代抉择，为解决业务痛点而孵化出跨端框架技术。本文主要分享美团民宿在跨端复用技术探索层面以及业务实践过程中积累的经验，希望能给大家带来一些帮助或者启发。
1. 背景
1.1 美团民宿业务介绍
美团民宿专注为消费者提供“住得不一样”的旅居体验，提供的服务包括民宿、酒店、公寓、客栈、短租、宾馆、旅行住宿等，同时包括树屋、房车、INS 风等新奇的网红民宿。美团民宿自上线之后，业务发展迅猛，在供给侧，房源类型不断丰富，各类分销、直销、直连、境外陆续推出，房源信息维度不断扩展，筛选、推荐、信息呈现也不断变得复杂。同时伴随着营销方式的丰富、房东管理、经营、服务的不断扩充，民宿的业务也越来越复杂。美团民宿大前端伴随业务的发展不断自我迭代，移动端整体架构也随之不断调整、升级，以寻求匹配业务多样化、复杂化的发展诉求。
1.2 美团民宿移动端现状
业务的发展和跨端复用技术的不断演化，让美团民宿客户端从业务刚起步的单端 Native App，到跨 App（民宿 App、美团 App、点评 App ）的 Native 复用和以 SSR…]]></summary>
        <author>
            <name>美团技术团队</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[科技爱好者周刊（第 161 期）：再见了，学术硕士]]></title>
        <id>http://www.ruanyifeng.com/blog/2021/06/weekly-issue-161.html</id>
        <link href="http://www.ruanyifeng.com/blog/2021/06/weekly-issue-161.html"/>
        <updated>2021-06-04T00:29:26.000Z</updated>
        <summary type="html"><![CDATA[这里记录每周值得分享的科技内容，周五发布。...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ACL 2021｜美团提出基于对比学习的文本表示模型，效果相比BERT-flow提升8%]]></title>
        <id>https://tech.meituan.com/2021/06/03/acl-2021-consert-bert.html</id>
        <link href="https://tech.meituan.com/2021/06/03/acl-2021-consert-bert.html"/>
        <updated>2021-06-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[尽管基于BERT的模型在NLP诸多下游任务中取得了成功，直接从BERT导出的句向量表示往往被约束在一个很小的区域内，表现出很高的相似度，因而难以直接用于文本语义匹配。为解决BERT原生句子表示这种“坍缩”现象，美团NLP中心知识图谱团队提出了基于对比学习的句子表示迁移方法——ConSERT，通过在目标领域的无监督语料上Fine-tune，使模型生成的句子表示与下游任务的数据分布更加适配。在句子语义匹配（STS）任务的实验结果显示，同等设置下ConSERT相比此前的SOTA（BERT-flow）大幅提升了8%，并且在少样本场景下仍表现出较强的性能提升。

论文：《ConSERT: A Contrastive Framework for Self-Supervised Sentence Representation Transfer》
会议：ACL 2021
下载链接：https://arxiv.org/abs/2105.11741
开源代码：https://github.com/yym6472/ConSERT

1. 背景
句向量表示学习在自然语言处理（NLP）领域占据重要地位，许多NLP任务的成功离不开训练优质的句子表示向量。特别是在文本语义匹配（Semantic Textual Similarity）、文本向量检索（Dense Text Retrieval）等任务上，模型通过计算两个句子编码后的Embedding在表示空间的相似度来衡量这两个句子语义上的相关程度，从而决定其匹配分数。
尽管基于BERT的模型在诸多NLP任务上取得了不错的性能（通过有监督的Fine-tune），但其自身导出的句向量（不经过Fine-tune，对所有词向量求平均）质量较低，甚至比不上Glove的结果，因而难以反映出两个句子的语义相似度$^\text{[1][2][3][4]}$。我们在研究的过…]]></summary>
        <author>
            <name>美团技术团队</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CVPR 2021 | 基于Transformer的端到端视频实例分割方法]]></title>
        <id>https://tech.meituan.com/2021/06/03/cvpr-transformer.html</id>
        <link href="https://tech.meituan.com/2021/06/03/cvpr-transformer.html"/>
        <updated>2021-06-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[前言
实例分割是计算机视觉中的基础问题之一。目前，静态图像中的实例分割业界已经进行了很多的研究，但是对视频的实例分割（Video Instance Segmentation，简称VIS）的研究却相对较少。而真实世界中的摄像头所接收的，无论是自动驾驶背景下车辆实时感知的周围场景，还是网络媒体中的长短视频，大多数都是视频流信息而非纯图像信息。因而研究对视频建模的模型有着十分重要的意义，本文系美团无人配送团队在CVPR2021发表的一篇Oral论文: 《End-to-End Video Instance Segmentation with Transformers》的解读。本届CVPR大会共收到7015篇有效投稿，最终共1663篇论文被接收，论文录用率为23.7%，Oral的录用率仅为4%。
背景
图像的实例分割指的是对静态图像中感兴趣的物体进行检测和分割的任务。视频是包含多帧图像的信息载体，相对于静态图像来说，视频的信息更为丰富，因而建模也更为复杂。不同于静态图像仅含有空间的信息，视频同时含有时间维度的信息，因而更接近对真实世界的刻画。其中，视频的实例分割指的是对视频中感兴趣的物体进行检测、分割和跟踪的任务。如图1所示，第一行为给定视频的多帧图像序列，第二行为视频实例分割的结果，其中相同颜色对应同一个实例。视频实例分割不光要对单帧图像中的物体进行检测和分割，而且要在多帧的维度下找到每个物体的对应关系，即对其进行关联和跟踪。

相关工作
现有的视频实例分割算法通常为包含多模块、多阶段的复杂流程。最早的Mask Track R-CNN[1]算法同时包含实例分割和跟踪两个模块，通过在图像实例分割算法Mask R-CNN[2]的网络之上增加一个跟踪的分支实现，该分支主要用于实例特征的提取。在预测阶段，该方法利用外部Memory模块进行多帧实例特征的存储，并将该特征作为实例关联的一个要素…]]></summary>
        <author>
            <name>美团技术团队</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.10.2]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.10.2</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.10.2"/>
        <updated>2021-06-01T04:39:30.000Z</updated>
        <summary type="html"><![CDATA[Added: testing and CI/CD workflows]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2021全国科技工作者日：致敬科技工作者]]></title>
        <id>https://tech.meituan.com/2021/05/30/2021-5-30.html</id>
        <link href="https://tech.meituan.com/2021/05/30/2021-5-30.html"/>
        <updated>2021-05-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[你因科技而精彩，科技因你而腾飞。]]></summary>
        <author>
            <name>美团技术团队</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux Bcc Ext4 Latency Tracing]]></title>
        <id>https://kernel.taobao.org//2017/10/Linux-bcc-ext4-Latency-Tracing/</id>
        <link href="https://kernel.taobao.org//2017/10/Linux-bcc-ext4-Latency-Tracing/"/>
        <updated>2021-05-29T01:17:29.809Z</updated>
        <summary type="html"><![CDATA[Linux Bcc Ext4 Latency Tracing]]></summary>
        <author>
            <name>Kernel Aliyun</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[科技爱好者周刊（第 160 期）：中年码农的困境]]></title>
        <id>http://www.ruanyifeng.com/blog/2021/05/weekly-issue-160.html</id>
        <link href="http://www.ruanyifeng.com/blog/2021/05/weekly-issue-160.html"/>
        <updated>2021-05-28T00:20:22.000Z</updated>
        <summary type="html"><![CDATA[这里记录每周值得分享的科技内容，周五发布。...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[外卖商品的标准化建设与应用]]></title>
        <id>https://tech.meituan.com/2021/05/27/food-name-standardization.html</id>
        <link href="https://tech.meituan.com/2021/05/27/food-name-standardization.html"/>
        <updated>2021-05-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[1. 背景及目标
商品作为外卖交易过程中的核心要素，决定了供需匹配的精准度，直接影响交易行为是否可以达成。外卖平台美食、甜点、饮品类在线商品有亿级之多，其中很多是属性信息一致的相同商品。建立对商品的标准化描述、聚合相同商品，是很多业务场景的诉求。
供销分析场景：想分析一下望京的商家都售卖哪些菜品，有多少商家卖“西红柿炒鸡蛋”？
遇到的问题：由于菜品是非标品，并且商家对菜品命名的个性化程度也较高，因此在外卖平台，同一个菜品名出现不同的命名方式；例如“西红柿炒鸡蛋”有西红柿炒蛋、小番茄炒蛋、西红柿鸡蛋、京城三绝~番茄炒蛋【正价小份菜】等，没有办法简单通过关键字进行聚合。
主题推荐场景：想出一个菜品粒度的主题，快速筛选“小龙虾”、“烤鱼”、“鸡公煲”、“黄焖鸡”等热门菜品？
遇到的问题：商品分类的颗粒度不够精细，无法快速找到适合颗粒度的菜品。
商家上单场景：像“鱼香肉丝”这样普遍的菜品，每个商家上单都需要录入食材、口味、做法、菜系、荤素等标签，录入成本较高，能不能像淘宝一样，选择“iPhone 12”，它的属性就能够自动关联。
遇到的问题：没有将菜品的属性标准化，菜品和属性之间没有关联关系。
基于上述业务应用的痛点，启动外卖商品的标准化建设。目标是建立商品的标准化名称，实现对相同商品的聚合，从而为业务提供合理粒度的概念划分，赋能运营端供销分析、用户端个性化召回排序、商家端标签生产。
2. 业界调研
对于业界的参考，主要参考淘宝标准化SPU建设。SPU在淘宝体系中决定了商品是什么，是商品信息聚合的最小单位，由关键属性+绑定属性来构成。

关键属性：用来约束和定义一个商品的，比如iPhone X，决定他的就是“苹果”这个品牌和“X”这个系列。
绑定属性：是关键属性的补充和细化，比如当iPhone X已经明确了这个产品后，其他的属性也确定，比如网络模型，屏幕尺寸等，进一步补充这些属性内…]]></summary>
        <author>
            <name>美团技术团队</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[外卖套餐搭配的探索和应用]]></title>
        <id>https://tech.meituan.com/2021/05/27/set-meal-recommendation.html</id>
        <link href="https://tech.meituan.com/2021/05/27/set-meal-recommendation.html"/>
        <updated>2021-05-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[1. 背景
让用户更方便快捷地选购到满意的外卖商品，是美团外卖一直在努力的方向。本文主要介绍了针对美食类商家的套餐搭配技术以及应用实践。在外卖点餐的选择过程中，用户一般会考虑单品偏好、组合搭配等因素，挑选商家和商品的过程耗时较长。我们通过套餐搭配技术，基于商家的候选商品，自动搭配优质套餐，轻松解决用户“选择困难症”，能够提升用户的决策效率。
2. 业务目标和挑战
2.1 业务目标
目前，美团外卖App的套餐搭配应用有很多，有“今日套餐推荐”、“满减神器”、“套餐搭配推荐”等。由于目前外卖商家自行搭配套餐的能力较弱而且意愿不强，导致外卖套餐底层供给对业务场景和商家的覆盖率偏低，不能满足套餐相关推荐排序应用的需求。因此，外卖套餐搭配的业务目标是对于美食类商家搭配出候选的套餐组合，给套餐相关应用方提供更丰富的套餐供给。

对于套餐相关应用方，我们进行了业务分析：“今日推荐”、“满减神器”等业务的搭配条件相对较弱且可以离线获取搭配条件，归类为推荐型相关业务，此类业务需要保证商家的套餐覆盖率提升，从而保证商家的推荐露出。详情页、满减加购等业务的搭配条件较强，而且偏实时。例如，详情页是用户指定一个菜品后进行搭配，满减加购场景是用户选择一个菜品和特定的价格区间作为条件。这些属于搭配型业务，此类业务需要保证套餐对实时场景的覆盖，从而保证套餐搭配Tab的露出。套餐搭配算法的目标有：①提升套餐组合的覆盖度，从而给下游的套餐相关应用提供场景覆盖率高、多样性充足的套餐组合。②保证搭配套餐的质量。
2.2 业务挑战
商品搭配在电商场景下也存在较多的应用，例如淘宝的购物车搭配、服装搭配，化妆品搭配。购物车搭配是基于用户购物车、已购买商品的打包推荐，例如，用户在加购牙刷后，可以给出牙膏的推荐。这类方法主要基于商品的购买行为进行相关性的推荐，目标不是形成一个完成的搭配组合。但是，外卖美食商品搭配则需要考虑…]]></summary>
        <author>
            <name>美团技术团队</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[美团外卖美食知识图谱的迭代及应用]]></title>
        <id>https://tech.meituan.com/2021/05/27/food-knowledge-graph.html</id>
        <link href="https://tech.meituan.com/2021/05/27/food-knowledge-graph.html"/>
        <updated>2021-05-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[0. 写在前面
菜品是外卖交易过程的核心要素，对菜品的理解也是实现外卖供需匹配的重点。本期推送，我们将通过三篇文章系统地介绍了美团外卖美食知识图谱的构建和应用。第一篇文章会介绍外卖知识图谱的体系全貌，包括菜品类目、标准菜品、美食基础属性(食材、口味等)和美食业务主题属性。同时外卖的菜品属于非标品。第二篇，我们将重点介绍外卖菜品标准化建设思路、技术方案和业务应用。由于外卖的业务特点是搭配成单，所以在第三篇我们会针对性地介绍外卖套餐搭配技术的迭代以及应用实践。希望对从事相关工作的同学能够带来一些启发或者帮助。
本文系外卖美食知识图谱系列的第一篇文章，这篇文章系统地介绍了美团外卖美食知识图谱的标签体系结构，包括菜品类目标签、标准菜品名、美食基础属性（食材、口味、菜系等）和美食业务主题属性（商家招牌、类目经典等）。在技术层面，举例对标签体系的具体构建方法进行介绍，例如基于BERT预训练的分类模型。在应用方面，介绍了美食知识图谱在美团外卖业务的具体应用，包括支撑套餐搭配的菜品表征、提升搜索和商家推荐等业务的用户体验。
1. 背景
知识图谱，旨在描述真实世界中存在的各种实体和实体之间的关系。在美团外卖业务中，美食商品是美团向用户提供服务的基础，美食知识图谱的建设，可以帮助我们向用户提供更加准确、更加丰富、更加个性化的美食服务。另外，美团外卖业务向用户提供“到家”吃饭的服务，到店餐饮业务则向用户提供“到店”吃饭的服务，而外卖和到店的商家和菜品有相当程度的重合，菜品数据的对齐，为我们进行线上（外卖场景）线下（到店场景）数据的对比分析也提供了一个很好的“抓手”。
本文介绍了外卖美食知识图谱的建设，基于对外卖业务数据（外卖交易数据、商家录入的商品标签信息、专业描述PGC、用户评论UGC、商品图片等）和站外数据（百科、菜谱等）的挖掘和分析，形成了针对外卖美食的分类体系（美食类目标签）和标准化体系…]]></summary>
        <author>
            <name>美团技术团队</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.9.0]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.9.0</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.9.0"/>
        <updated>2021-05-26T06:02:55.000Z</updated>
        <summary type="html"><![CDATA[Added: experimental support for iTunes podcast feed: Demo | Source. With this new release, you can render an audio control to play the mp3 file and display iTunes episode duration. It is "experimental" due to these caveats:

This feature is currently only available through custom template.
iTunes has no strict format requirement for duration. The unit is most likely seconds but can be "hh:mm:ss" or "mm:ss" for some sources. A future version may expose a human readable string to the template.
No image support yet. Some shows might have disabled CORS or use a relative URL for image, which forces osmosfeed to download the image during build. A future version may support it.
You can't republish the podcast in the feed output. Supporting this goes beyond the scope of the project at the moment.
Fixed: the articles in template data were not sorted.
Thank you @Zenigata]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.8.1]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.8.1</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.8.1"/>
        <updated>2021-05-23T05:40:12.000Z</updated>
        <summary type="html"><![CDATA[Fixed: UnhandledPromiseRejectionWarning: Error: At least one option must be a string]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.8.0]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.8.0</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.8.0"/>
        <updated>2021-05-23T05:12:08.000Z</updated>
        <summary type="html"><![CDATA[Changed: Smart summary truncation. When there is no dedicated summary (only Atom feed has it, and many sites don't use it) from the source, we check if the content/description (Both Atom and RSS) field is long enough to be full text. If so, it will be truncated into a "pseudo" summary. If not, we assume the source used the content field as summary, and it will be displayed in full length.
Thank you: @LooperXX.]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[科技爱好者周刊（第 159 期）：游戏开发者的年薪]]></title>
        <id>http://www.ruanyifeng.com/blog/2021/05/weekly-issue-159.html</id>
        <link href="http://www.ruanyifeng.com/blog/2021/05/weekly-issue-159.html"/>
        <updated>2021-05-21T00:17:00.000Z</updated>
        <summary type="html"><![CDATA[这里记录每周值得分享的科技内容，周五发布。...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[百亿规模API网关服务Shepherd的设计与实现]]></title>
        <id>https://tech.meituan.com/2021/05/20/shepherd-api-gateway.html</id>
        <link href="https://tech.meituan.com/2021/05/20/shepherd-api-gateway.html"/>
        <updated>2021-05-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[一、背景介绍
1.1 API网关是什么？
API网关是随着微服务（Microservice）概念兴起的一种架构模式。原本一个庞大的单体应用（All in one）业务系统被拆分成许多微服务（Microservice）系统进行独立的维护和部署，服务拆分带来的变化是API的规模成倍增长，API的管理难度也在日益增加，使用API网关发布和管理API逐渐成为一种趋势。一般来说，API网关是运行于外部请求与内部服务之间的一个流量入口，实现对外部请求的协议转换、鉴权、流控、参数校验、监控等通用功能。
1.2 为什么要做Shepherd API网关？
在没有Shepherd API网关之前，美团业务研发人员如果要将内部服务输出为对外的HTTP API接口。通常要搭建一个Web应用，用于完成基础的鉴权、限流、监控日志、参数校验、协议转换等工作，同时需要维护代码逻辑、基础组件的升级，研发效率相对比较低。此外，每个Web应用都需要维护机器、配置、数据库等，资源利用率也非常差。
美团内部一些业务线苦于没有现成的解决方案，根据自身业务特点，研发了业务相关的API网关。放眼业界，亚马逊、阿里巴巴、腾讯等公司也都有成熟的API网关解决方案。
因此，Shepherd API网关项目正式立项，我们的目标是为美团提供高性能、高可用、可扩展的统一API网关解决方案，让业务研发人员通过配置的方式即可对外开放功能和数据。

1.3 使用Shepherd带来的收益是什么？
从业务研发人员的角度来看，接入Shepherd API网关，能带来哪些收益呢？简而言之包括三个方面。

提升研发效率
业务研发人员只需要通过配置的方式即可快速开放服务接口。
Shepherd统一提供鉴权、限流、熔断等非业务基础能力。
Shepherd支持业务研发人员通过开发自定义组件的方式扩展API网关能力。

降低沟通成本
业务研发人员配置好A…]]></summary>
        <author>
            <name>美团技术团队</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[中国经济的数字逻辑]]></title>
        <id>http://www.ruanyifeng.com/blog/2021/05/china-economy-explanation.html</id>
        <link href="http://www.ruanyifeng.com/blog/2021/05/china-economy-explanation.html"/>
        <updated>2021-05-19T12:54:48.000Z</updated>
        <summary type="html"><![CDATA[重庆市前市长黄奇帆退休以后，受聘担任复旦大学特聘教授，定期给师生做讲座，介绍他对中国经济的看法。...]]></summary>
        <author>
            <name>阮一峰的网络日志</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[v1.7.2]]></title>
        <id>https://github.com/osmoscraft/osmosfeed/releases/tag/v1.7.2</id>
        <link href="https://github.com/osmoscraft/osmosfeed/releases/tag/v1.7.2"/>
        <updated>2021-05-17T05:32:19.000Z</updated>
        <summary type="html"><![CDATA[⚠ Deprecated: To accommodate the monorepo setup, the node version in all templates/demos/examples has changed from 14 to 16. This is not a breaking change as our compile target is still node 14, and node 16 is backward compatible. We still recommend you start using node-version: "16" in your .github/workflows/update-feed.yaml today to get the performance/security improvements from the newer node. See example
Chore: Reorganize to monorepo with npm workspace.]]></summary>
        <author>
            <name>Release notes from osmosfeed</name>
        </author>
    </entry>
</feed>